zabbix_export:
  version: '7.2'
  template_groups:
  - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
    name: Templates/Applications
  templates:
  - uuid: 11144543d1144a3693aa0b97a1c20dac
    template: GitHub repository by HTTP
    name: GitHub repository by HTTP
    description: |
      This template is designed for the effortless deployment of GitHub repository monitoring by Zabbix via GitHub REST API and doesn't require any external scripts.

      For more details about GitHub REST API, refer to the official documentation:
      https://docs.github.com/en/rest?apiVersion=2022-11-28

      Setup:

      1. Create an access token for monitoring

      One of the simplest ways to send authenticated requests is to use a personal access token - either a classic or a fine-grained one:
      https://docs.github.com/en/rest/authentication/authenticating-to-the-rest-api?apiVersion=2022-11-28#authenticating-with-a-personal-access-token

      Classic personal access token

      You can create a new classic personal access token by following the instructions in the official documentation:
      https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic

      For public repositories, no additional permission scopes are required. For monitoring to work on private repositories, the "repo" scope must be set to have full control of private repositories.

      Additional information about OAuth scopes is available in the official documentation:
      https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes

      Note that authenticated users must have admin access to the repository and the "repo" scope must be set to get information about self-hosted runners:
      https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#list-self-hosted-runners-for-a-repository

      Fine-grained personal access token

      Alternatively, you can use a fine-grained personal access token:
      https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token

      In order to use fine-grained tokens to monitor organization-owned repositories, organizations must opt in to fine-grained personal access tokens and set up a personal access token policy:
      https://docs.github.com/en/organizations/managing-programmatic-access-to-your-organization/setting-a-personal-access-token-policy-for-your-organization

      The fine-grained token needs to have the following permissions set to provide access to the repository resources:
      - "Actions" repository permissions (read);
      - "Administration" repository permissions (read);
      - "Contents" repository permissions (read);
      - "Issues" repository permissions (read);
      - "Metadata" repository permissions (read);
      - "Pull requests" repository permissions (read).

      2. Set the access token that you've created in step 1 in the "{$GITHUB.API.TOKEN}" macro
      3. Change the API URL in the "{$GITHUB.API.URL}" macro if needed (for self-hosted installations)
      4. Set the repository owner name in the "{$GITHUB.REPO.OWNER}" macro
      5. Set the repository name in the "{$GITHUB.REPO.NAME}" macro
      6. Set the LLD rule filters if needed (you may want to use it to also stay within rate limits as on large repositories, LLD rules may generate a lot of script items)

      Note: Update intervals and timeouts for script items can be changed individually via "{$GITHUB.INTERVAL}" and "{$GITHUB.TIMEOUT}" macros with context. Depending on the repository being monitored, it can be adjusted if needed (if you are exceeding rate limits, you can increase update intervals for some script items to stay within per hour request limits). But be aware that it may also affect the triggers (check whether the item is used in triggers and adjust thresholds and/or evaluation periods if needed).

      Generated by official Zabbix template tool "Templator"
    vendor:
      name: Zabbix
      version: 7.2-0
    groups:
    - name: Templates/Applications
    tags:
    - tag: class
      value: application
    - tag: target
      value: github
    - tag: target
      value: repository
    macros:
    - macro: '{$GITHUB.API.TOKEN}'
      type: SECRET_TEXT
      description: Set the access token here.
    - macro: '{$GITHUB.API.URL}'
      value: https://api.github.com/
      description: Set the API URL here.
    - macro: '{$GITHUB.API_VERSION}'
      value: '2022-11-28'
      description: The API version that is used in headers for HTTP requests.
    - macro: '{$GITHUB.BRANCH.NAME.MATCHES}'
      value: .+
      description: The repository branch name regex filter to use in branch-related
        metric discovery - for including.
    - macro: '{$GITHUB.BRANCH.NAME.NOT_MATCHES}'
      value: CHANGE_IF_NEEDED
      description: The repository branch name regex filter to use in branch-related
        metric discovery - for excluding.
    - macro: '{$GITHUB.HTTP_PROXY}'
      description: The HTTP proxy for script items (set if needed). If the macro is
        empty, then no proxy is used.
    - macro: '{$GITHUB.INTERVAL}'
      value: 1m
      description: The update interval for the script items that retrieve data from
        the API. Can be used with context if needed (check the context values in relevant
        items).
    - macro: '{$GITHUB.INTERVAL:"get_(branches|workflows)"}'
      value: 1h
      description: The update interval for the script items that retrieve the branches
        and workflows. Used only for related metric discovery.
    - macro: '{$GITHUB.INTERVAL:"get_repo"}'
      value: 15m
      description: The update interval for the script item that retrieves the repository
        information.
    - macro: '{$GITHUB.INTERVAL:"get_runners"}'
      value: 15m
      description: The update interval for the script item that retrieves the information
        about self-hosted runners.
    - macro: '{$GITHUB.INTERVAL:regex:"get_(tags|releases|issues)_count"}'
      value: 1h
      description: The update interval for the script items that retrieve the number
        of tags, releases, issues, and pull requests (total, open, closed).
    - macro: '{$GITHUB.INTERVAL:regex:"get_commits_count:.+"}'
      value: 1h
      description: The update interval for the script items that retrieve the commits
        count in discovered branches.
    - macro: '{$GITHUB.INTERVAL:regex:"get_last_run:.+"}'
      value: 15m
      description: The update interval for the script items that retrieve the information
        about the last workflow run results.
    - macro: '{$GITHUB.REPO.NAME}'
      value: <SET THE REPO NAME>
      description: Set the repository name here.
    - macro: '{$GITHUB.REPO.OWNER}'
      value: <SET THE REPO OWNER>
      description: Set the repository owner here.
    - macro: '{$GITHUB.REQUESTS.UTIL.HIGH}'
      value: '90'
      description: The threshold percentage of utilized API requests in a High trigger
        expression.
    - macro: '{$GITHUB.REQUESTS.UTIL.WARN}'
      value: '80'
      description: The threshold percentage of utilized API requests in a Warning
        trigger expression.
    - macro: '{$GITHUB.RESULTS_PER_PAGE}'
      value: '100'
      description: The number of results to fetch per page. Can be used with context
        and adjusted if needed (check the context values in script parameters of relevant
        items).
    - macro: '{$GITHUB.RUNNER.NAME.MATCHES}'
      value: .+
      description: The repository self-hosted runner name regex filter to use in discovering
        metrics related to the self-hosted runner - for including.
    - macro: '{$GITHUB.RUNNER.NAME.NOT_MATCHES}'
      value: CHANGE_IF_NEEDED
      description: The repository self-hosted runner name regex filter to use in discovering
        metrics related to the self-hosted runner - for excluding.
    - macro: '{$GITHUB.RUNNER.OS.MATCHES}'
      value: .+
      description: The repository self-hosted runner OS regex filter to use in discovering
        metrics related to the self-hosted runner - for including.
    - macro: '{$GITHUB.RUNNER.OS.NOT_MATCHES}'
      value: CHANGE_IF_NEEDED
      description: The repository self-hosted runner OS regex filter to use in discovering
        metrics related to the self-hosted runner - for excluding.
    - macro: '{$GITHUB.TIMEOUT}'
      value: 15s
      description: The timeout threshold for the script items that retrieve data from
        the API. Can be used with context if needed (check the context values in relevant
        items).
    - macro: '{$GITHUB.USER_AGENT}'
      value: Zabbix/7.2
      description: The user agent that is used in headers for HTTP requests.
    - macro: '{$GITHUB.WORKFLOW.NAME.MATCHES}'
      value: .+
      description: The repository workflow name regex filter to use in workflow-related
        metric discovery - for including.
    - macro: '{$GITHUB.WORKFLOW.NAME.NOT_MATCHES}'
      value: CHANGE_IF_NEEDED
      description: The repository workflow name regex filter to use in workflow-related
        metric discovery - for excluding.
    - macro: '{$GITHUB.WORKFLOW.STATE.MATCHES}'
      value: active
      description: The repository workflow state regex filter to use in workflow-related
        metric discovery - for including.
    - macro: '{$GITHUB.WORKFLOW.STATE.NOT_MATCHES}'
      value: CHANGE_IF_NEEDED
      description: The repository workflow state regex filter to use in workflow-related
        metric discovery - for excluding.
    - macro: '{$GITHUB.WORKFLOW.STATUS.IN_PROGRESS.THRESH}'
      value: 24h
      description: The time threshold used in the trigger of a workflow run that has
        been in the queue for too long. Can be used with context if needed.
    - macro: '{$GITHUB.WORKFLOW.STATUS.QUEUED.THRESH}'
      value: 1h
      description: The time threshold used in the trigger of a workflow run that has
        been in the queue for too long. Can be used with context if needed.
